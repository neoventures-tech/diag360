# Generated by Django 5.2 on 2025-10-06 21:04

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MaturityLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level_number', models.IntegerField(help_text='Número do nível (1-5)', unique=True)),
                ('min_score', models.IntegerField(help_text='Pontuação mínima')),
                ('max_score', models.IntegerField(help_text='Pontuação máxima')),
                ('name', models.CharField(help_text='Nome do nível (ex: Nível 1: Inicial / Caótico)', max_length=100)),
                ('focus', models.CharField(help_text='Foco principal do nível', max_length=200)),
                ('description', models.TextField(help_text='Descrição do nível de maturidade')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Nível de Maturidade',
                'verbose_name_plural': 'Níveis de Maturidade',
                'ordering': ['level_number'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(help_text='Ordem da pergunta (1, 2, 3...)', unique=True)),
                ('label', models.TextField(help_text='Texto da pergunta')),
                ('field_name', models.CharField(help_text='Nome do campo (ex: question1)', max_length=50, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Pergunta ativa no formulário')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pergunta',
                'verbose_name_plural': 'Perguntas',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='InnovationEvaluation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('company_name', models.CharField(blank=True, help_text='Nome da empresa', max_length=255, null=True)),
                ('contact_email', models.EmailField(blank=True, help_text='Email de contato', max_length=254, null=True)),
                ('phone', models.CharField(blank=True, help_text='Telefone de contato', max_length=20, null=True)),
                ('sector', models.CharField(blank=True, help_text='Setor de atuação', max_length=100, null=True)),
                ('company_size', models.CharField(blank=True, choices=[('PE', 'Pequena Empresa (até R$ 4,8 milhões/ano)'), ('PME', 'Pequena Média Empresa (R$ 4,8 a R$ 10 milhões/ano)'), ('ME', 'Média Empresa (R$ 10 a R$ 100 milhões/ano)'), ('GE', 'Grande Empresa (R$ 100 a R$ 300 milhões/ano)'), ('GGE', 'Muito Grande Empresa (acima de R$ 300 milhões/ano)')], help_text='Porte da empresa', max_length=10, null=True)),
                ('total_score', models.FloatField(default=0, help_text='Pontuação total calculada')),
                ('score_by_dimension', models.JSONField(blank=True, default=dict, help_text='Pontuação por dimensão')),
                ('maturity_level', models.CharField(blank=True, help_text='Nível de maturidade (Ex: Nível 1: Inicial / Caótico)', max_length=100)),
                ('focus', models.CharField(blank=True, help_text='Foco principal do nível', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Descrição do nível de maturidade')),
                ('priority_action', models.TextField(blank=True, help_text='Ação prioritária recomendada')),
                ('ai_analysis', models.TextField(blank=True, help_text='Análise gerada pela IA (Considerações Finais)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source_ip', models.GenericIPAddressField(blank=True, help_text='IP de origem da avaliação', null=True)),
                ('maturity_level_fk', models.ForeignKey(blank=True, help_text='Nível de maturidade da avaliação (novo campo)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='evaluations', to='forms.maturitylevel')),
            ],
            options={
                'verbose_name': 'Avaliação de Inovação',
                'verbose_name_plural': 'Avaliações de Inovação',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(help_text='Valor da opção (1-5)')),
                ('text', models.TextField(help_text='Texto da opção de resposta')),
                ('order', models.IntegerField(help_text='Ordem de exibição')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='forms.question')),
            ],
            options={
                'verbose_name': 'Opção de Resposta',
                'verbose_name_plural': 'Opções de Resposta',
                'ordering': ['question', 'order'],
                'unique_together': {('question', 'order'), ('question', 'value')},
            },
        ),
        migrations.CreateModel(
            name='PriorityAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_size', models.CharField(choices=[('PE', 'Pequena Empresa (até R$ 4,8 milhões/ano)'), ('PME', 'Pequena Média Empresa (R$ 4,8 a R$ 10 milhões/ano)'), ('ME', 'Média Empresa (R$ 10 a R$ 100 milhões/ano)'), ('GE', 'Grande Empresa (R$ 100 a R$ 300 milhões/ano)'), ('GGE', 'Muito Grande Empresa (acima de R$ 300 milhões/ano)')], help_text='Porte da empresa', max_length=10)),
                ('action', models.TextField(help_text='Ação prioritária recomendada')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('maturity_level', models.ForeignKey(help_text='Nível de maturidade relacionado', on_delete=django.db.models.deletion.CASCADE, related_name='priority_actions', to='forms.maturitylevel')),
            ],
            options={
                'verbose_name': 'Ação Prioritária',
                'verbose_name_plural': 'Ações Prioritárias',
                'ordering': ['maturity_level', 'company_size'],
                'unique_together': {('maturity_level', 'company_size')},
            },
        ),
        migrations.CreateModel(
            name='EvaluationAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('choice', models.ForeignKey(help_text='Opção escolhida', on_delete=django.db.models.deletion.PROTECT, to='forms.choice')),
                ('evaluation', models.ForeignKey(help_text='Avaliação relacionada', on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='forms.innovationevaluation')),
                ('question', models.ForeignKey(help_text='Pergunta respondida', on_delete=django.db.models.deletion.PROTECT, to='forms.question')),
            ],
            options={
                'verbose_name': 'Resposta da Avaliação',
                'verbose_name_plural': 'Respostas das Avaliações',
                'ordering': ['evaluation', 'question__order'],
                'unique_together': {('evaluation', 'question')},
            },
        ),
    ]
