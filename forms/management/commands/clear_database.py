from django.core.management.base import BaseCommand
from forms.models import (
    InnovationEvaluation,
    EvaluationAnswer,
    AxisScore,
    Question,
    Choice,
    EvaluationAxis,
    MaturityLevel,
    PriorityAction,
    SalesTrigger,
    InnovationLevelMaintenance
)


class Command(BaseCommand):
    help = 'Limpa todo o banco de dados mantendo apenas os usu√°rios'

    def add_arguments(self, parser):
        parser.add_argument(
            '--yes',
            action='store_true',
            help='Confirma a limpeza sem pedir confirma√ß√£o interativa',
        )

    def handle(self, *args, **options):
        # Contagem antes da limpeza
        counts = {
            'evaluations': InnovationEvaluation.objects.count(),
            'answers': EvaluationAnswer.objects.count(),
            'axis_scores': AxisScore.objects.count(),
            'questions': Question.objects.count(),
            'choices': Choice.objects.count(),
            'axes': EvaluationAxis.objects.count(),
            'maturity_levels': MaturityLevel.objects.count(),
            'priority_actions': PriorityAction.objects.count(),
            'sales_triggers': SalesTrigger.objects.count(),
            'maintenance_actions': InnovationLevelMaintenance.objects.count(),
        }

        self.stdout.write(
            self.style.WARNING('\n' + '=' * 80)
        )
        self.stdout.write(
            self.style.WARNING('‚ö†Ô∏è  ATEN√á√ÉO: LIMPEZA DO BANCO DE DADOS')
        )
        self.stdout.write(
            self.style.WARNING('=' * 80)
        )
        self.stdout.write('\nOs seguintes dados ser√£o PERMANENTEMENTE deletados:\n')

        for model_name, count in counts.items():
            if count > 0:
                self.stdout.write(f'  ‚Ä¢ {model_name}: {count} registros')

        self.stdout.write(
            self.style.SUCCESS('\n‚úì Os usu√°rios e suas senhas ser√£o MANTIDOS\n')
        )

        # Confirma√ß√£o
        if not options['yes']:
            self.stdout.write(
                self.style.WARNING('Digite "LIMPAR" (em mai√∫sculas) para confirmar a opera√ß√£o:')
            )
            confirmation = input('> ')

            if confirmation != 'LIMPAR':
                self.stdout.write(
                    self.style.ERROR('\n‚ùå Opera√ß√£o cancelada pelo usu√°rio.\n')
                )
                return

        self.stdout.write(
            self.style.WARNING('\n' + '=' * 80)
        )
        self.stdout.write(
            self.style.WARNING('üóëÔ∏è  INICIANDO LIMPEZA DO BANCO DE DADOS...')
        )
        self.stdout.write(
            self.style.WARNING('=' * 80 + '\n')
        )

        # Ordem de dele√ß√£o respeitando as foreign keys
        deletions = [
            ('Respostas de Avalia√ß√µes', EvaluationAnswer),
            ('Scores por Eixo', AxisScore),
            ('Avalia√ß√µes de Inova√ß√£o', InnovationEvaluation),
            ('Op√ß√µes de Resposta', Choice),
            ('Quest√µes', Question),
            ('A√ß√µes Priorit√°rias', PriorityAction),
            ('Gatilhos de Venda', SalesTrigger),
            ('A√ß√µes de Manuten√ß√£o', InnovationLevelMaintenance),
            ('N√≠veis de Maturidade', MaturityLevel),
            ('Eixos de Avalia√ß√£o', EvaluationAxis),
        ]

        for model_name, model_class in deletions:
            count = model_class.objects.count()
            if count > 0:
                model_class.objects.all().delete()
                self.stdout.write(
                    self.style.SUCCESS(f'‚úì {model_name}: {count} registros deletados')
                )
            else:
                self.stdout.write(
                    self.style.WARNING(f'‚è≠  {model_name}: nenhum registro para deletar')
                )

        self.stdout.write(
            self.style.SUCCESS('\n' + '=' * 80)
        )
        self.stdout.write(
            self.style.SUCCESS('‚úÖ LIMPEZA CONCLU√çDA COM SUCESSO!')
        )
        self.stdout.write(
            self.style.SUCCESS('=' * 80)
        )
        self.stdout.write(
            self.style.SUCCESS('\nüí° Dica: Execute "python manage.py 0-populate_all" para repopular o banco\n')
        )
